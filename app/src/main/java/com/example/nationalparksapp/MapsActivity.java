package com.example.nationalparksapp;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.EditText;import android.widget.ImageButton;import androidx.annotation.NonNull;import androidx.cardview.widget.CardView;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentActivity;import androidx.lifecycle.ViewModelProvider;import com.example.nationalparksapp.Adapter.CustomInfoWindowAdapter;import com.example.nationalparksapp.Data.AsyncResponse;import com.example.nationalparksapp.Data.Repository;import com.example.nationalparksapp.Model.Park;import com.example.nationalparksapp.Model.ParkViewModel;import com.example.nationalparksapp.Util.Util;import com.example.nationalparksapp.databinding.ActivityMapsBinding;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.BitmapDescriptorFactory;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.material.bottomnavigation.BottomNavigationView;import java.util.ArrayList;import java.util.List;public class MapsActivity extends FragmentActivity implements OnMapReadyCallback, GoogleMap.OnInfoWindowClickListener {    private GoogleMap mMap;    private ActivityMapsBinding binding;    private BottomNavigationView bottomNavigationView;    private ParkViewModel parkViewModel;    private List<Park> mParkList;    private CardView cardView;    private EditText stateCodeEditText;    private ImageButton searchBarImageBtn;    private String mStateCode = "";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        binding = ActivityMapsBinding.inflate(getLayoutInflater());        setContentView(binding.getRoot());        parkViewModel = new ViewModelProvider(this).get(ParkViewModel.class);        cardView = findViewById(R.id.cardView);        stateCodeEditText = findViewById(R.id.state_code_edittext);        searchBarImageBtn = findViewById(R.id.search_image_btn);        // Obtain the SupportMapFragment and get notified when the map is ready to be used.        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()                .findFragmentById(R.id.map);        mapFragment.getMapAsync(this);        bottomNavigationView = findViewById(R.id.bottom_nav);        bottomNavigationView.setOnNavigationItemSelectedListener(item -> {            Fragment selectedFragment = null;            int id = item.getItemId();            if (id == R.id.maps_nav_btn) {                //Maps                mMap.clear();                selectedFragment = mapFragment;                mapFragment.getMapAsync(this);            } else if (id == R.id.parks_btn) {                //nature btn fragment                selectedFragment = ParksFragment.newInstance();                cardView.setVisibility(View.GONE);            }            getSupportFragmentManager().beginTransaction()                    .replace(R.id.map, selectedFragment)                    .commit();            return true;        });        //Pass the state code to Repository        searchBarImageBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                mParkList.clear();                String stateCode = stateCodeEditText.getText().toString().trim();                if(!TextUtils.isEmpty(stateCode)) {                    mStateCode = stateCode;                    parkViewModel.setSelectStateCode(stateCode);                    onMapReady(mMap);                    stateCodeEditText.setText("");                }                Util.hideSoftKeyboard(view);            }        });    }    @Override    public void onMapReady(GoogleMap googleMap) {        mMap = googleMap;        mMap.setInfoWindowAdapter(new CustomInfoWindowAdapter(getApplicationContext()));        mMap.setOnInfoWindowClickListener(this);        cardView.setVisibility(View.VISIBLE);        mParkList = new ArrayList<>();        mParkList.clear();        populateMap();    }    @Override    public void onInfoWindowClick(@NonNull Marker marker) {        //when marker is clicked goes to fragment_park_description        parkViewModel.setSelectPark((Park) marker.getTag());        cardView.setVisibility(View.GONE);        getSupportFragmentManager()                .beginTransaction()                .replace(R.id.map, ParkDescriptionFragment.newInstance())                .commit();    }    private void populateMap() {        mMap.clear(); // Clears the map!!        Repository.getParks(new AsyncResponse() {            @Override            public void processPark(List<Park> parkList) {                mParkList = parkList;                // Adding Marker for each national park                for (Park currPark : parkList) {                    Log.d("MainMaps", "processPark: " + currPark.toString());                    String latitude = currPark.getLatitude();                    String longitude = currPark.getLongitude();                    if(latitude.isEmpty() || longitude.isEmpty()){                        continue;                    }                    LatLng latLng = new LatLng(Double.parseDouble(currPark.getLatitude()), Double.parseDouble(currPark.getLongitude()));                    MarkerOptions markerOptions = new MarkerOptions()                            .position(latLng)                            .title(currPark.getName())                            .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE))                            .snippet(currPark.getStates());                    Marker marker = mMap.addMarker(markerOptions);                    marker.setTag(currPark);                    mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 5));                }                //Saving all Park List to ParkViewModel                parkViewModel.setSelectedParkList(mParkList);                Log.d("Populate", "populateMap: " + mParkList.size());            }        }, mStateCode);    }}